const Video = require('../models/video');
const path = require('path');
const fs = require('fs');

const videoUploadPath = path.join(__dirname, '../public/videos');
const videoStreamPath = path.join(__dirname, '../public/videos');

exports.uploadVideo = async (req, res) => {
  try {
    const { originalname, buffer } = req.file;
    const { title, description, category } = req.body;

    const video = new Video({
      title,
      description,
      category,
      filename: originalname,
      filePath: path.join(videoUploadPath, originalname),
    });
    await video.save();

    fs.writeFileSync(path.join(videoUploadPath, originalname), buffer);

    res.status(200).send('Vidéo téléchargée avec succès.');
  } catch (error) {
    console.error(error);
    res.status(500).send('Une erreur est survenue lors du téléchargement de la vidéo.');
  }
};

exports.displayVideoStream = async (req, res) => {
  try {
    const videoId = req.params.videoId;
    const video = await Video.findById(videoId);

    if (!video) {
      return res.status(404).send('Vidéo non trouvée.');
    }

    const videoPath = path.join(videoStreamPath, video.filename);

    const stat = fs.statSync(videoPath);
    const fileSize = stat.size;
    const range = req.headers.range || 'bytes=0-';

    const parts = range.replace(/bytes=/, '').split('-');
    const start = parseInt(parts[0], 10);
    const end = parts[1] ? parseInt(parts[1], 10) : fileSize - 1;

    const chunkSize = end - start + 1;
    const file = fs.createReadStream(videoPath, { start, end });

    const head = {
      'Content-Range': `bytes ${start}-${end}/${fileSize}`,
      'Accept-Ranges': 'bytes',
      'Content-Length': chunkSize,
      'Content-Type': 'video/mp4', 
    };

    res.writeHead(206, head);
    file.pipe(res);
  } catch (error) {
    console.error(error);
    res.status(500).send('Une erreur est survenue lors du chargement de la vidéo.');
  }
  };

exports.displayVideoList = async (req, res) => {
  try {
    const videos = await Video.find();
    res.render('videos/video-list', { videos });
  } catch (error) {
    console.error(error);
    res.status(500).send('Une erreur est survenue lors de l\'affichage des vidéos.');
  }
};